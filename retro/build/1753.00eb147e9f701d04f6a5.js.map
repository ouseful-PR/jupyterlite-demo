{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/pyolite-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/pyolite-kernel-extension/lib/index.js"],"names":["BaseKernel","options","this","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","id","name","sendMessage","_id","_name","_sendMessage","Promise","resolve","isDisposed","emit","msg","_busy","header","msg_type","_kernelInfo","_executeRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","content","_a","_b","message","KernelMessage","channel","msgType","session","parentHeader","type","metadata","buffers","parent","execution_state","kernelInfoRequest","_executeInput","result","executeRequest","code","startsWith","push","data","Object","keys","length","_executeResult","_executeReply","execution_count","status","user_expressions","payload","e","stack","error","ename","evalue","traceback","_error","historyMsg","history","completeMsg","completeRequest","IKernels","Token","IKernelSpecs","PyoliteKernel","super","_executeDelegate","PromiseDelegate","_ready","pyodideUrl","widgetsnbextensionWheel","widgetsnbextensionWheelUrl","URLExt","window","location","origin","nbformatWheel","nbformatWheelUrl","ipykernelWheel","ipykernelWheelUrl","pyoliteWheel","pyoliteWheelUrl","indexUrl","slice","lastIndexOf","blob","Blob","join","_worker","Worker","URL","createObjectURL","onmessage","_processWorkerMessage","console","log","terminate","dispose","promise","_c","_d","_e","_f","bundle","text","stream","results","transient","displayData","updateDisplayData","wait","clearOutput","executeResult","executeError","handleComm","implementation","implementation_version","language_info","codemirror_mode","version","file_extension","mimetype","nbconvert_exporter","pygments_lexer","protocol_version","banner","help_links","url","_sendWorkerMessage","executionCount","Error","postMessage","autoStart","requires","activate","app","kernelspecs","PageConfig","register","spec","display_name","language","argv","env","interrupt_mode","resources","create","async"],"mappings":"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","file":"1753.00eb147e9f701d04f6a5.js","sourcesContent":["import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._executeRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param content The display_data content.\n     */\n    displayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `error` message to the client.\n     *\n     * @param content The error content.\n     */\n    executeError(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param content The clear_output content.\n     */\n    clearOutput(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `execute_result` message to the client.\n     *\n     * @param content The execute_result content.\n     */\n    executeResult(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content,\n            metadata,\n            buffers\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _executeRequest(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = msg.header;\n        this._executeInput(msg);\n        try {\n            const result = await this.executeRequest(content);\n            // do not store magics in the history\n            if (!content.code.startsWith('%')) {\n                this._history.push([0, 0, content.code]);\n            }\n            // send the execute result only if there is a result\n            if (result.data && Object.keys(result.data).length > 0) {\n                this._executeResult(msg, result);\n            }\n            this._executeReply(msg, {\n                execution_count: this._executionCount,\n                status: 'ok',\n                user_expressions: {},\n                payload: []\n            });\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            const error = {\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            };\n            this._error(msg, error);\n            this._executeReply(msg, {\n                execution_count: this._executionCount,\n                status: 'error',\n                ...error\n            });\n        }\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param msg The parent message.\n     * @param content The execut result content.\n     */\n    _executeResult(msg, content) {\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_result',\n            parentHeader: msg.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                ...content,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_reply` message.\n     *\n     * @param msg The parent message.\n     * @param content The content for the execute reply.\n     */\n    _executeReply(msg, content) {\n        const parent = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: parent.header,\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message.\n     *\n     * @param msg The parent message.\n     * @param content The content for the execution error response.\n     */\n    _error(msg, content) {\n        const message = KernelMessage.createMessage({\n            msgType: 'error',\n            parentHeader: msg.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport worker from './worker?raw';\n// TODO: see https://github.com/jtpio/jupyterlite/issues/151\n// TODO: sync this version with the npm version (despite version mangling)\nimport pyolite from '../py/pyolite/dist/pyolite-0.1.0a3-py3-none-any.whl';\n// TODO: sync this version with the pypi version\nimport widgetsnbextension from '../py/widgetsnbextension/dist/widgetsnbextension-3.5.0-py3-none-any.whl';\nimport nbformat from '../py/nbformat/dist/nbformat-4.2.0-py3-none-any.whl';\nimport ipykernel from '../py/ipykernel/dist/ipykernel-5.5.5-py3-none-any.whl';\n/**\n * A kernel that executes Python code with Pyodide.\n */\nexport class PyoliteKernel extends BaseKernel {\n    /**\n     * Instantiate a new PyodideKernel\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._executeDelegate = new PromiseDelegate();\n        this._ready = new PromiseDelegate();\n        const { pyodideUrl } = options;\n        const widgetsnbextensionWheel = widgetsnbextension;\n        const widgetsnbextensionWheelUrl = URLExt.join(window.location.origin, widgetsnbextensionWheel);\n        const nbformatWheel = nbformat;\n        const nbformatWheelUrl = URLExt.join(window.location.origin, nbformatWheel);\n        const ipykernelWheel = ipykernel;\n        const ipykernelWheelUrl = URLExt.join(window.location.origin, ipykernelWheel);\n        const pyoliteWheel = (_a = options.pyoliteWheel) !== null && _a !== void 0 ? _a : pyolite;\n        const pyoliteWheelUrl = URLExt.join(window.location.origin, pyoliteWheel);\n        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);\n        const blob = new Blob([\n            [\n                `importScripts(\"${pyodideUrl}\");`,\n                `var indexURL = \"${indexUrl}\";`,\n                `var _widgetsnbextensionWheelUrl = '${widgetsnbextensionWheelUrl}';`,\n                `var _nbformatWheelUrl = '${nbformatWheelUrl}';`,\n                `var _ipykernelWheelUrl = '${ipykernelWheelUrl}';`,\n                `var _pyoliteWheelUrl = '${pyoliteWheelUrl}';`,\n                worker\n            ].join('\\n')\n        ]);\n        this._worker = new Worker(window.URL.createObjectURL(blob));\n        this._worker.onmessage = e => {\n            this._processWorkerMessage(e.data);\n        };\n        this._ready.resolve();\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        console.log(`Dispose worker for kernel ${this.id}`);\n        this._worker.terminate();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d, _e, _f;\n        switch (msg.type) {\n            case 'stream': {\n                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };\n                this.stream(bundle);\n                break;\n            }\n            case 'reply': {\n                const bundle = msg.results;\n                this._executeDelegate.resolve(bundle);\n                break;\n            }\n            case 'display_data': {\n                const bundle = (_b = msg.bundle) !== null && _b !== void 0 ? _b : { data: {}, metadata: {}, transient: {} };\n                this.displayData(bundle);\n                break;\n            }\n            case 'update_display_data': {\n                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };\n                this.updateDisplayData(bundle);\n                break;\n            }\n            case 'clear_output': {\n                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { wait: false };\n                this.clearOutput(bundle);\n                break;\n            }\n            case 'execute_result': {\n                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { execution_count: 0, data: {}, metadata: {} };\n                this.executeResult(bundle);\n                break;\n            }\n            case 'execute_error': {\n                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : { ename: '', evalue: '', traceback: [] };\n                this.executeError(bundle);\n                break;\n            }\n            case 'comm_msg':\n            case 'comm_open':\n            case 'comm_close': {\n                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers);\n                break;\n            }\n            default:\n                this._executeDelegate.resolve({\n                    data: {},\n                    metadata: {}\n                });\n                break;\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'pyodide',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'python',\n                    version: 3\n                },\n                file_extension: '.py',\n                mimetype: 'text/x-python',\n                name: 'python',\n                nbconvert_exporter: 'python',\n                pygments_lexer: 'ipython3',\n                version: '3.8'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'Pyolite: A WebAssembly-powered Python kernel backed by Pyodide',\n            help_links: [\n                {\n                    text: 'Python (WASM) Kernel',\n                    url: 'https://pyodide.org'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const result = await this._sendWorkerMessage('execute-request', content);\n        if (result.name) {\n            throw result;\n        }\n        // TODO: move executeResult and executeError here\n        return {\n            execution_count: this.executionCount,\n            ...result\n        };\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        return await this._sendWorkerMessage('complete-request', content);\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        return await this._sendWorkerMessage('comm-info-request', content);\n    }\n    /**\n     * Send an `input_request` message.\n     *\n     * @param content - The content of the request.\n     */\n    async inputRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        return await this._sendWorkerMessage('comm-open', msg);\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        return await this._sendWorkerMessage('comm-msg', msg);\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        return await this._sendWorkerMessage('comm-close', msg);\n    }\n    /**\n     * Send a message to the web worker\n     *\n     * @param type The message type to send to the worker.\n     * @param data The message to send to the worker.\n     */\n    async _sendWorkerMessage(type, data) {\n        this._executeDelegate = new PromiseDelegate();\n        this._worker.postMessage({ type, data });\n        return await this._executeDelegate.promise;\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { PyoliteKernel } from '@jupyterlite/pyolite-kernel';\n/**\n * The default CDN fallback for Pyodide\n */\nconst PYODIDE_CDN_URL = 'https://cdn.jsdelivr.net/pyodide/v0.17.0/full/pyodide.js';\n/**\n * A plugin to register the Pyodide kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/pyolite-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        const url = PageConfig.getOption('pyodideUrl') || PYODIDE_CDN_URL;\n        const pyodideUrl = URLExt.isLocal(url)\n            ? URLExt.join(window.location.origin, url)\n            : url;\n        kernelspecs.register({\n            spec: {\n                name: 'python',\n                display_name: 'Pyolite',\n                language: 'python',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'Pyolite',\n                    language: 'python',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/python.png'\n                }\n            },\n            create: async (options) => {\n                return new PyoliteKernel({\n                    ...options,\n                    pyodideUrl\n                });\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"sourceRoot":""}