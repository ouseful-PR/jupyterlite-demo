{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/theme-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/theme/lib/manager.js"],"names":["CommandIDs","ThemeManager","options","super","this","_themesUrl","url","path","href","URLExt","Promise","resolve","reject","link","document","createElement","setAttribute","addEventListener","undefined","body","appendChild","push","changeTheme","themeScrollbars","themes","id","autoStart","provides","IThemeManager","requires","ISettingRegistry","optional","ISplashScreen","activate","app","settings","splash","host","shell","commands","key","PageConfig","manager","themeChanged","connect","sender","args","currentTheme","newValue","dataset","jpThemeLight","String","isLight","jpThemeName","jpThemeScrollbars","loadCSSOverrides","notifyCommandChanged","addCommand","label","theme","displayName","getDisplayName","isToggled","execute","setTheme","isToggledThemeScrollbars","toggleThemeScrollbars"],"mappings":"0KAOIA,E,iCCEG,MAAMC,UAAqB,eAC9B,YAAYC,GACRC,MAAMD,GACNE,KAAKC,WAAa,GAClBD,KAAKC,WAAaH,EAAQI,IAO9B,QAAQC,GACJ,MAAMC,EAAO,EAAAC,OAAA,KAAYL,KAAKC,WAAYE,GAC1C,OAAO,IAAIG,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAOC,SAASC,cAAc,QACpCF,EAAKG,aAAa,MAAO,cACzBH,EAAKG,aAAa,OAAQ,YAC1BH,EAAKG,aAAa,OAAQR,GAC1BK,EAAKI,iBAAiB,QAAQ,KAC1BN,OAAQO,MAEZL,EAAKI,iBAAiB,SAAS,KAC3BL,EAAO,8BAA8BJ,QAEzCM,SAASK,KAAKC,YAAYP,GAC1BT,KAAa,OAAEiB,KAAKR,QD1BhC,SAAWb,GACPA,EAAWsB,YAAc,wBACzBtB,EAAWuB,gBAAkB,4BAFjC,CAGGvB,IAAeA,EAAa,KAI/B,MAAMwB,EAAS,CACXC,GAAI,yCACJC,WAAW,EACXC,SAAU,EAAAC,cACVC,SAAU,CAAC,EAAAC,kBACXC,SAAU,CAAC,EAAAC,eACXC,SAAU,CAACC,EAAKC,EAAUC,KACtB,MAAMC,EAAOH,EAAII,MACXC,EAAWL,EAAIK,SACfC,EAAMhB,EAAOC,GACbnB,EAAM,EAAAmC,WAAA,UAAqB,aAC3BC,EAAU,IAAIzC,EAAa,CAC7BuC,MACAH,OACAF,WACAC,OAAQA,QAAuCA,OAASlB,EACxDZ,QAmCJ,OAhCAoC,EAAQC,aAAaC,SAAQ,CAACC,EAAQC,KAClC,MAAMC,EAAeD,EAAKE,SAC1BlC,SAASK,KAAK8B,QAAQC,aAAeC,OAAOT,EAAQU,QAAQL,IAC5DjC,SAASK,KAAK8B,QAAQI,YAAcN,EAChCjC,SAASK,KAAK8B,QAAQK,oBACtBH,OAAOT,EAAQnB,gBAAgBwB,MAC/BjC,SAASK,KAAK8B,QAAQK,kBAAoBH,OAAOT,EAAQnB,gBAAgBwB,KAG7EL,EAAQa,mBACRhB,EAASiB,qBAAqBxD,EAAWsB,gBAE7CiB,EAASkB,WAAWzD,EAAWsB,YAAa,CACxCoC,MAAOZ,IACH,MAAMa,EAAQb,EAAY,MACpBc,EAAclB,EAAQmB,eAAeF,GAC3C,OAAOb,EAAgB,UAAI,cAAcc,IAAgBA,GAE7DE,UAAWhB,QAnBXC,IAmBmBD,EAAY,MAC/BiB,QAASjB,IACL,MAAMa,EAAQb,EAAY,MAC1B,GAAIa,IAAUjB,EAAQiB,MAGtB,OAAOjB,EAAQsB,SAASL,MAGhCpB,EAASkB,WAAWzD,EAAWuB,gBAAiB,CAC5CmC,MAAO,mBACPI,UAAW,IAAMpB,EAAQuB,2BACzBF,QAAS,IAAMrB,EAAQwB,0BAEpBxB,IAIf,EADgB,CAAClB","file":"6238.9d02070ed1fb43f96c0b.js","sourcesContent":["import { ISplashScreen, IThemeManager } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ThemeManager } from '@jupyterlite/theme';\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.changeTheme = 'apputils:change-theme';\n    CommandIDs.themeScrollbars = 'apputils:theme-scrollbars';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The themes plugin.\n */\nconst themes = {\n    id: '@jupyterlite/apputils-extension:themes',\n    autoStart: true,\n    provides: IThemeManager,\n    requires: [ISettingRegistry],\n    optional: [ISplashScreen],\n    activate: (app, settings, splash) => {\n        const host = app.shell;\n        const commands = app.commands;\n        const key = themes.id;\n        const url = PageConfig.getOption('themesUrl');\n        const manager = new ThemeManager({\n            key,\n            host,\n            settings,\n            splash: splash !== null && splash !== void 0 ? splash : undefined,\n            url\n        });\n        let currentTheme;\n        manager.themeChanged.connect((sender, args) => {\n            const currentTheme = args.newValue;\n            document.body.dataset.jpThemeLight = String(manager.isLight(currentTheme));\n            document.body.dataset.jpThemeName = currentTheme;\n            if (document.body.dataset.jpThemeScrollbars !==\n                String(manager.themeScrollbars(currentTheme))) {\n                document.body.dataset.jpThemeScrollbars = String(manager.themeScrollbars(currentTheme));\n            }\n            // Set any CSS overrides\n            manager.loadCSSOverrides();\n            commands.notifyCommandChanged(CommandIDs.changeTheme);\n        });\n        commands.addCommand(CommandIDs.changeTheme, {\n            label: args => {\n                const theme = args['theme'];\n                const displayName = manager.getDisplayName(theme);\n                return args['isPalette'] ? `Use Theme: ${displayName}` : displayName;\n            },\n            isToggled: args => args['theme'] === currentTheme,\n            execute: args => {\n                const theme = args['theme'];\n                if (theme === manager.theme) {\n                    return;\n                }\n                return manager.setTheme(theme);\n            }\n        });\n        commands.addCommand(CommandIDs.themeScrollbars, {\n            label: 'Theme Scrollbars',\n            isToggled: () => manager.isToggledThemeScrollbars(),\n            execute: () => manager.toggleThemeScrollbars()\n        });\n        return manager;\n    }\n};\nconst plugins = [themes];\nexport default plugins;\n","import { ThemeManager as LabThemeManager } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\n/**\n * A class that provides theme management.\n *\n * Note: Custom Theme Manager than core JupyterLab to be\n * able to override the `loadCSS` method for now.\n *\n */\nexport class ThemeManager extends LabThemeManager {\n    constructor(options) {\n        super(options);\n        this._themesUrl = '';\n        this._themesUrl = options.url;\n    }\n    /**\n     * Load a theme CSS file by theme name.\n     *\n     * @param path The path to the theme style.\n     */\n    loadCSS(path) {\n        const href = URLExt.join(this._themesUrl, path);\n        return new Promise((resolve, reject) => {\n            const link = document.createElement('link');\n            link.setAttribute('rel', 'stylesheet');\n            link.setAttribute('type', 'text/css');\n            link.setAttribute('href', href);\n            link.addEventListener('load', () => {\n                resolve(undefined);\n            });\n            link.addEventListener('error', () => {\n                reject(`Stylesheet failed to load: ${href}`);\n            });\n            document.body.appendChild(link);\n            this['_links'].push(link);\n        });\n    }\n}\n"],"sourceRoot":""}